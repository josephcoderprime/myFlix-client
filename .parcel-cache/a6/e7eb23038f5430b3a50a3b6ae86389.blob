var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MainView", ()=>MainView
);
class MainView extends React.Component {
    constructor(){
        super();
        //Initial state is set to null
        this.state = {
            movies: [],
            user: null,
            token: null
        };
    }
    // One of the hooks available in a React Component
    componentDidMount() {
        let accessToken = localStorage.getItem('token');
        if (accessToken !== null) {
            this.setState({
                user: localStorage.getItem('user')
            });
            this.getMovies(accessToken);
        }
    }
    getMovies(token) {
        axios.get(`${Config.API_URL}/movies`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            this.props.setMovies(response.data);
        }).catch(function(error) {
            console.log(error);
        });
    }
    /* When a user successfully logs in, this function updates the `user` for
    entry in state to the *particular user*/ onLoggedIn(authData) {
        console.log(authData);
        this.setState({
            user: authData.user.Username
        });
        localStorage.setItem('token', authData.token);
        localStorage.setItem('user', authData.user.Username);
        localStorage.setItem('email', authData.user.Email);
        localStorage.setItem('birthday', authData.user.Birthday);
        localStorage.setItem('favoriteMovies', authData.user.FavoriteMovies);
        this.getMovies(authData.token);
    }
    logOut() {
        localStorage.clear();
        this.setState({
            user: null
        });
        console.log("logout successful");
        alert("You have logout successfully");
    }
    render() {
        //const { movies, register, selectedMovie, user } = this.state;  
        let { movies  } = this.props;
        let { user  } = this.state;
        /* If there is no user, the LoginView is rendered. If there is a user logged in, the user
        details are *passed as a prop to the LoginView*/ //before the movie have been loaded
        //if (!us
        return(/*#__PURE__*/ React.createElement("div", {
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 78
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(Router, {
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 79
            },
            __self: this
        }, /*#__PURE__*/ React.createElement("div", {
            className: "insert-navbar",
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 80
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(Link, {
            to: `/`,
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 81
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(Button, {
            variant: "link",
            className: "navbar-link",
            onClick: ()=>this.logOut()
            ,
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 82
            },
            __self: this
        }, "Sign Out")), /*#__PURE__*/ React.createElement(Link, {
            to: `/users/${user}`,
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 90
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(Button, {
            variant: "link",
            className: "navbar-link",
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 91
            },
            __self: this
        }, "My Profile"))), /*#__PURE__*/ React.createElement(Row, {
            className: "main-view justify-content-md-center",
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 97
            },
            __self: this
        }, /*#__PURE__*/ React.createElement(Route, {
            exact: true,
            path: "/",
            render: ()=>{
                console.log('user= ', user);
                if (!user) return(/*#__PURE__*/ React.createElement(LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                }));
                return(/*#__PURE__*/ React.createElement(MoviesList, {
                    movies: movies
                }));
            },
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 99
            },
            __self: this
        }), /*#__PURE__*/ React.createElement(Route, {
            path: "/register",
            render: ()=>{
                if (user) return(/*#__PURE__*/ React.createElement(Redirect, {
                    to: "/"
                }));
                return(/*#__PURE__*/ React.createElement(Col, {
                    md: 6
                }, /*#__PURE__*/ React.createElement(RegistrationView, null)));
            },
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 105
            },
            __self: this
        }), /*#__PURE__*/ React.createElement(Route, {
            path: "/movies/:movieId",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ React.createElement(Col, {
                    md: 6
                }, /*#__PURE__*/ React.createElement(LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ React.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ React.createElement(Col, {
                    md: 8
                }, /*#__PURE__*/ React.createElement(MovieView, {
                    movie: movies.find((m)=>m._id === match.params.movieId
                    ),
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 112
            },
            __self: this
        }), /*#__PURE__*/ React.createElement(Route, {
            path: "/directors/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ React.createElement(Col, {
                    md: 6
                }, /*#__PURE__*/ React.createElement(LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ React.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ React.createElement(Col, {
                    md: 8
                }, /*#__PURE__*/ React.createElement(DirectorView, {
                    director: movies.find((m)=>m.Director.Name === match.params.name
                    ).Director,
                    movies: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 124
            },
            __self: this
        }), /*#__PURE__*/ React.createElement(Route, {
            path: "/genres/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ React.createElement(Col, {
                    md: 6
                }, /*#__PURE__*/ React.createElement(LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ React.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ React.createElement(Col, {
                    md: 8
                }, /*#__PURE__*/ React.createElement(GenreView, {
                    genre: movies.find((m)=>m.Genre.Name === match.params.name
                    ).Genre,
                    onBackClick: ()=>history.goBack()
                    ,
                    movies: movies
                })));
            },
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 137
            },
            __self: this
        }), /*#__PURE__*/ React.createElement(Route, {
            path: "/users/:userId",
            render: ({ history  })=>{
                if (!user) return(/*#__PURE__*/ React.createElement(Col, {
                    md: 6
                }, /*#__PURE__*/ React.createElement(LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ React.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ React.createElement(Col, {
                    md: 8
                }, /*#__PURE__*/ React.createElement(ProfileView, {
                    movies: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 149
            },
            __self: this
        }), /*#__PURE__*/ React.createElement(Route, {
            path: "/update/:userId",
            render: ({ history  })=>{
                if (!user) return(/*#__PURE__*/ React.createElement(Col, {
                    md: 6
                }, /*#__PURE__*/ React.createElement(LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ React.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ React.createElement(Col, {
                    md: 8
                }, /*#__PURE__*/ React.createElement(ProfileUpdate, {
                    movies: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Beppe\\Documents\\careerfoundry\\myFlix-client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 162
            },
            __self: this
        })))));
    }
}
let mapStateToProps = (state)=>{
    return {
        movies: state.movies,
        user: state.user
    };
};
exports.default = connect(mapStateToProps, {
    setMovies,
    setUser
})(MainView);
